#### 7. User Authentication - 로그인 구현 ####


( 7.0 ) Schema Type

참고자료)
Schema Type-Unique >  https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-unique

(예시)
< User Schema >
```
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  avatarUrl: String,
  socialOnly: { type: Boolean, default: false },
  username: { type: String, required: true, unique: true }, password: { type: String },
  name: { type: String, required: true },
  location: String,
  comments: [{ type: mongoose.Schema.Types.ObjectId, ref: "Comment" }],
  videos: [{ type: mongoose.Schema.Types.ObjectId, ref: "Video" }],
});

const User = mongoose.model("User", userSchema);
```
SchemaType.prototype.unique() => 고유 인덱스 선언
=> 제약 조건을 위반 시 Mongoose 유효성 검사 오류가 아닌 저장할 때 MongoDB에서 E11000 오류 반환


( 7.1 ) 회원가입 - 유저 생성

== 유저 생성을 기다려야하므로 회원가입 시에도 await / async

(예시) - 유저 생성
```
  await User.create({
    name,
    username,
    email,
    password,
    location,
  });
```


( 7.2 ) 회원가입 - 비밀번호 해싱

참고자료) 
해시함수 설명 영상 > https://www.youtube.com/watch?v=67UwxR3ts2E
bcrypt 설치 및 실행 > https://www.npmjs.com/package/bcrypt
Schema.prototype.pre() > https://mongoosejs.com/docs/api.html#schema_Schema-pre 

== DB에 비밀번호 저장 X > 해싱된 비밀번호를 DB에 저장 O
== 해싱 > 일방향 함수 > 출력값으로 입력값을 알 수 없음 
== db.users.remove() 명령어 실행되지 않을 경우 db.users.deleteMany({}) 사용

== bcrypt - 암호 해시 라이브러리
== npm i bcrypt


( 7.3 ) 회원가입 - 중복 키 제거 ( USERNAME, EMAIL )

 

