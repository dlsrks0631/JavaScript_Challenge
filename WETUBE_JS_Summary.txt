a###### WETUBE JS SUMMARY ######

< Settings >

1. #### Node JS ####
== 브라우저 바깥에서 쓸 수 있는 자바스크립트

2. #### NPM ####
== 자바스크립트 언어를 위한 패키지 매니저
== Node JS와 상호작용을 할 수 있게 해줌
== 

3. #### Express - NPM ####
== npm i(=install) express -> node_modules파일 + package-lock.json 파일 생성     
                           -> 기존 package.json파일 dependencies express 생성됨
                           -> npm i 실행 시 dependencies에 해당되는 모듈들을 다 설치해줌
                           -> .gitignore -> /node_modules -> 다른사람들에게 node_modules 파일을 보내지 않아도 됨. package.json파일만 있어도 됨
                           -> dependencies에 express 있을 시 이후 npm i 만 실행해도 됨
                           -> package-lock.json -> 패키지들을 안전하게 관리함

== npm init -> 새 npm패키지 또는 기존 npm 패키지를 설정 할 수 있음 
            -> package.json 만드는 걸 도와줌
== node_modules -> npm으로 설치한 모든 패키지가 저장됨

4. #### Package.json ####
== json -> 그냥 텍스트 파일임. 파일에 정보를 저장하기 위해 만든 방식 중 하나
== npm 활용 -> npm init을 통해 package.json 생성
== node.js 관련 정보를 담는 방법으로 일반적인 Text이므로 무엇을 넣어도 상관없음

== script 엔트리를 생성하고 그 안에 script를 입력하면 --> npm run (script이름) 을 사용할 수 있음
(ex)ppopopp
"scripts": {
    "win": "node index.js" --> npm run win 실행 시 index.js파일 실행됨
}

"scripts": {
    "dev" : "nodemon -- exec babel-node src/server.js" --> npm run dev 사용 가능
}

5. #### Babeljs.io - JS compiler ####
== https://babeljs.io/setup#installation 참조
== 작성한 최신 자바스크립트를 nodeJS가 이해할 수 있는 자바스크립트로 바꿔주는 것
== dependencies: 프로젝트가 작동하기 위해 필요한 것들
== devDependencies: 개발자가 개발할 때 필요한 것들 
(ex) -- nodemon, babel-node
1. nodemon(파일을 보고 있다가 변화가 있으면 commend를 재시작 시켜줌) 서버를 만드는 데 필수적인 요소는 아니지만 개발환경을 편하게 해줌
2. nodemon -> babel-node를 실행 -> src 폴더에 가서 server.js 실행


NodeJS에서 필요한 babel설치
npm install --save-dev @babel/core
npm install @babel/preset-env --save-dev

babel.config.json파일 생성
```
{
"presets": ["@babel/preset-env"]
}
```

@babel/preset-env
@babel/preset-env는 환경에 필요한 구문 변환을 세부적으로 관리할 필요 없이 최신 JavaScript를 사용할 수 있게 해주는 preset

6. #### Nodemon ####
== https://babeljs.io/setup#installation 참조
== 실행방법
    1. npm install @babel/core @babel/node --save-dev
    2. npm i nodemon --save-dev

== node index.js(nodeJS로 실행) -> babel-node index.js(최신 문법 코드로 실행) -> nodemon --exec babel-node index.js(babel-node를 실행하는 nodemon)
== ex) "scripts": { nodemon --exec babel-node index.js" }
== 만든 파일이 수정되는 걸 감시해주는 패키지 -> 파일이 수정되면 알아서 재시작해줌 
                                          -> npm run 을 계속 실행해주지 않아도 됨

-----------------------------------------------------------------------------------------------------------------------------------------------

< Server >

1. #### Server ####
== 항상 켜져있고 인터넷에 연결 돼 있으면서 request를 listening하고 있는 컴퓨터 
== 브라우저는 서버에게 홈페이지를 요구하고, 브라우저가 요청한 걸 서버는 응답해줘야 함 --> 응답이 없을 시 무한 로딩
(ex)
import express from "express" == const 
const app = express();
app.get("/", handleHome) -> get(route, handler) ----> 서버에게 홈페이지를 request 후 handler 응답

2. #### GET Requests ####
== 브라우저는 대신해서  웹사이트를 요청하고, 페이지를 가져다 줌 == 페이지를 가져와 !!
== (ex) import express from "express";
        const app = express();

        => app.get("root", callback)
        app.get("/", () => console.log("Somebody is trying to go home.")) => 누군가가 root page로 get request를 보낸다면 함수를 실행

        const handleHome = () => console.log("Somebody is trying to go home.") => 위와 동일
        app.get("/", handleHome))

        app.get("/", console.log("Somebody is trying to go home.")) => 무조건 함수로 실행해야 하므로 오류
== request => 사용자가 원하는 것을 요청하는 것 
           => but, 사용자가 직접 get request를 하는 것이 아니라 브라우저가 get request를 보내는 것
           => get request에는 어디로 가려는지 /home, /login과 같은 route가 있음.

3. #### ( Request, Responses ) ####
== request를 받으면 브라우저가 request를 보내고 root 페이지를 가져달라는 request를 받으면 응답 !!
==  express.js에서 method 확인
    (ex) const handleHome = (req, res) => {
            return res.end(); -> 접속 종료
            return res.send("Hello"); -> 메세지 보냄
        };
 
4. #### Middleware ####
== 말 그대로 중간에 있는 software - request와 response의 중간 
== 모든 함수는 request 오브젝트와, response 오브젝트 말고도 next 파라미터를 가지고 있음 (req,res,next) / 하지만 그 중 함수가 next()를 호출 시 Middleware이 됨
== next 파라미터는 다음으로 request 를 처리할 콜백함수를 담고있음 
== 원하는 만큼 사용가능하며 누군가가 응답하기 전까지 request와 관련된 모든 controller는 모두 Middleware이다
== app.use => 모든 router들에서 사용 => app.get 전에 사용되어야 함

5. #### Morgan ####
== npm i morgan
== NodeJS를 위한 HTTP request logger
== npm i morgan
https://www.npmjs.com/package/morgan

== Morgan사용법
https://www.npmjs.com/package/morgan#examples

skip을 사용해서 특정 statusCode만 필터 가능
```
// EXAMPLE: only log error responses
morgan('combined', {
skip: function (req, res) { return res.statusCode < 400 }
})
```

6. #### Router && Controllers ####

모든 Express 애플리케이션에는 앱 라우터가 내장되어 있음.
라우터는 미들웨어 자체처럼 작동하므로 app.use()에 대한 인수로 또는 다른 라우터의 use() 메서드에 대한 인수로 사용 가능
최상위 익스프레스 객체에는 새로운 라우터 객체를 생성하는 Router() 메서드가 있다.

https://expressjs.com/ko/4x/api.html#router

(ex)
const videoRouter = express.Router();
const handleWatchVideo = (req,res) => res.send("Watch Video");
videoRouter.get("/watch",handleWatchVideo);

app.use("/videos", videoRouter); 
-> 누군가가 "/videos"로 시작하는 url에 접근하면
-> express는 videoRouter로 들어가고
-> videoRouter는 가지고 있는 url로 들어감으로써 handleWatchVideo 실행

-> Router와 Controller를 같이 쓰는 건 권장하지 않음
-> 따로 작성한 뒤 export && import 실행
-> export default는 내보내는 게 1개 밖에 없기에 변수명을 바꿔줘도 되지만
    export는 내보내는 게 여러가지라 선언된 변수명 그대로 써줘야 함

7. #### Export && Import ####
== 프로젝트에 있는 모든 파일은 분리된 모습이므로
== 무언가를 바깥에 공유하기 위해서는 export를 먼저 해줘야 함

====> Default Export 
== default export일 경우 이름을 동일하게 설정하지 않아도 됨 하지만 파일 당 하나만 설정할 수 있음
(ex)```
export default globalRouter;

=> 둘 다 가능
import globalRouter from "./routers/globalRouter";
import global from "./routers/globalRouter";
```

====> Export
== 하나의 파일에 export 여러개일 경우에는 const 앞에 export 사용 하지만 이름을 동일하게 설정해야 함
     export const trending = (req, res) => res.send("Home Page Videos");
     export const watch = (req, res) => res.send("Watch");
     export const edit = (req, res) => res.send("Edit");

     import { trending } from "../controllers/videoController";


8. #### URL Parameters ####

/:id => url에 변수값을 넣어 줄 수 있게 해준다
id - 변수명
: - /:id id가 변수라고 인식하게 해줌
(ex)
videoRouter.get("/:변수명/edit", edit);
-> URL 안에 변수를 넣어줌
-> req.params.변수명

== Routing
https://expressjs.com/ko/guide/routing.html

== 정규표현식 테스트 사이트
https://www.regexpal.com

== \w+: 모든 문자, 숫자 선택
== \d+: 모든 숫자 선택


-----------------------------------------------------------------------------------------------------------------------------------------------

< PUG == Returning HTML  >


1. #### PUG ####

== PUG 사용 이유
    1. 깔끔한 HTML 사용 가능
    2. HTML에 자바스크립트를 포함시킬 수 있음
    3. 반복하지 않아도 한 파일로 모든 템플릿을 업데이트 할 수 있음

== PUG 사용법
    1. PUG 설치 => npm i pug
    2. 뷰 엔진을 pug로 설정 => app.set("view enging", "pug");
    3. pug 파일 생성
    => pug파일 생성시 유의점 => 파일명은 모두 소문자로, 띄어쓰기 X

== 참조 https://www.npmjs.com/package/pug

== Express와 함께 템플리트 엔진을 사용
== Express가 템플리트를 렌더링하려면 다음과 같은 애플리케이션 설정이 필요
    views, 템플리트가 있는 디렉토리 (ex) app.set('views', './views')
    view engine, 사용할 템플리트 엔진 (ex) app.set('view engine', 'pug')

== 참조 https://expressjs.com/ko/guide/using-template-engines.html

Application Settings (Express어플리케이션 설정)
https://expressjs.com/ko/4x/api.html#app.us

2. #### PUG - PARTIALS ####

== 중복되는 코드를 효율적으로 관리할 수 있게 만듦
== 별도의 유니크한 파일 생성 후 include 파일 위치 (ex) include partials/footer.pug

3. #### PUG - Block && Extends ####

== https://pugjs.org/language/inheritance.html
== extends 확장 , inheritance 상속
(ex) base.pug를 만들어서
extend base.pug 로 해당 템플릿에서 원하는 부분만 바꿀 수 있게 함
base.pug에 block 이라는 공간을 집어넣어서
block 을 base.pug가 아닌 다른 템플릿에서 바꿔줌


4. #### Rendering ####

== pug를 렌더링해주는건 controller!
== render는 2개의 argument를 받는다
== 하나는 view, 다른 하나는 템플릿에 보낼 변수! (ex) controller => export const trending = (req, res) => res.render("home", { pageTitle: "Home", potato: "Jehyeon" });
					       		title #{pageTitle} | Wetube #{potato}

== 템플릿에 변수를 생성하는법 #{}

5. #### Conditionals - 조건 ####

참조 https://pugjs.org/language/conditionals.html

6. #### Iteration - 반복 ####

== Pug는 each와 while라는 두 가지 기본 반복 방법을 지원
```
ul
each val in [1, 2, 3, 4, 5]
	li= val
```

== 배열이나 객체에 반복할 값이 없으면 실행될 else 블록을 추가할 수도 있습니다.
```
- var values = [];
ul
	each val in values
		li= val
	else
		li There are no values
```
참조 https://pugjs.org/language/iteration.html


7. #### Mixins ####

mixin은 partial이긴 하지만 데이터를 받을 수 있는 partial

-controller-
const videos = [
{
title: "First Video",
rating: 5,
comments: 2,
createdAt: "2 minutes ago",
views: 62,
id: 1,
}
]

-mixin-
mixin video(info)
div
h4=info.title
ul
li #{info.rating}/5.
li #{info.comments}/comments.
li Posted #{info.created}.
li #{info.views} views.

-pug-
include mixins/video

each info in videos
+video(info)


-----------------------------------------------------------------------------------------------------------------------------------------------

< Fake Database >


1. #### POST ####
array database와 HTML 상호작용 과정
1. 각 비디오에 id 부여
2. id를 기반으로 비디오마다 anchor 생성
3. 임의의 id를 가진 url에 접근하려고 할 때, 해당 id를 가져와서 변수에 저장
4. 저장된 id를 기반으로 해당 id 에 해당하는 object를 변수에 저장
5. 저장된 object를 기반으로 HTML 렌더링하여 contents 출력

2. #### Absolute && Relative URL ####
== 제일앞에 /가있으면 절대경로
(ex)
a(href="/video/edit")--->localhost:4000/video/edit
a(href="video/edit")--->localhost:4000/videos/video/edit
a(href=`${video.id}/edit`)--->localhost:4000/videos/1/edit

3. #### GET request && POST request ####
== GET => form을 화면에 보여줌
== POST => 변경사항을 저장

4. #### req.body ####
== req.body를 사용함으로써 유저가 input에 작성한 data를 얻을 수 있음
== 생성한 input에 이름을 생성하지 않을 경우 적용되지 않음 
req.body에는 form을 통해 submit된 데이터의 키-값 쌍을 포함합니다.
기본적으로는 undefined이며 express.json() 또는 express.urlencoded()와 같은 바디 파싱 미들웨어를 사용할 때 값을 받아옵니다.

```
// 애플리케이션/json 파싱
app.use(express.json());
// application/x-www-form-urlencoded파싱 (form데이터 파싱)
app.use(express.urlencoded({ extended: true }));
==> HTML 형식을 이해하고 우리가 이해할 수 있는 JavaScript Object 형식으로 통역해줌
```
https://expressjs.com/ko/api.html#req.body

express.urlencoded([options])
Express에 내장된 미들웨어 기능입니다. urlencoded 페이로드로 들어오는 요청을 구문 분석하고 바디 파서를 기반으로 합니다.
https://expressjs.com/ko/api.html#express.urlencoded


-----------------------------------------------------------------------------------------------------------------------------------------------

< REAL DATABASE - Mongo DB >

#### 1. CRUD ####

#### 2. Schema && Model ####

== Mongoose의 모든 것은 스키마로 부터 시작된다
== 각 스키마는 MongoDB 컬렉션에 매핑되고 해당 컬렉션 내 문서의 모양을 정의한다
== Models => 스키마 정의에서 컴파일된 생성자로 모델은 기본 MongoDB 데이터 베이스에서 문서를 만들고 읽는다.
== DB를 mongoose와 연결시켜서 Video model을 인식시킨다

(ex)
```
const videoSchema = new mongoose.Schema({
    title: String,
    description: String,
    createdAt: Date,
    hashtags: [{type: String}],
    meta: {
        views: Number,
        rating: Number,
    },
});

const Video = mongoose.model("Video", videoSchema(데이터의 형태));
```
== 참조
== https://mongoosejs.com/docs/guide.html#schemas
== https://mongoosejs.com/docs/guide.html#models
== https://mongoosejs.com/docs/models.html


#### 3. Query ####

#### 4. Async Await ####

== async(비동기) -- await(수행될 때까지 기다려준다)
=> 데이터베이스가 데이터 찾을때까지 기다려준다(다음 것이 먼저 수행되는 것을 막음)
에러는 try-catch문으로 잡는다. 
== callback function 의 장점은 에러들을 바로 볼 수 있다는것
== await는 database에게 결과값을 받을때까지 js가 기다리게 해줄 수 있음
== async await의 장점은 매우 직관적이고 js가 어디서 어떻게 기다리는지 알 수 있다
== awiat는 function이 async 상태일 경우에 안에서 사용 가능하며 callback function과 달리 promise방식은 error가 어디서 오는지 명확하지 않음
== 명확하지 않으므로 try catch 방법을 사용 => 말 그대로 try 안에 있는 코드를 사용

< Callback function >
```
video.find({}, (error, videos) => {
	if(error){
		return res.render("server-error")
	}
	return res.render("home")
});
```


< Promise >
```
export const home = async (req, res) => {
	try {
		const videos = await video.find({});
		return res.render("home", { pageTitle: "Home", videos });
	} catch {
		return res.render("server-error");
	}
};
```

#### 5. Return && Render ####

== return의 역할 : 본질적인 return의 역할보다는 function을 마무리짓는 역할로 사용되고 있음.
==> 이러한 경우 return이 없어도 정상적으로 동작하지만 실수를 방지하기 위해 return을 사용
== render한 것은 다시 render할 수 없음
==> redirect(), sendStatus(), end() 등등 포함 (express에서 오류 발생)

#### 6. Mongoose - Schema ####

== Mongoose Schema는 Mongoose Model을 구성하기 위한 객체로 생각할 수 있음
== Mongoose의 모든 것은 Schema로 시작하며, 각 스키마는 MongoDB 컬렉션에 매핑되고 해당 컬렉션 내 문서의 모양을 정의한다
== https://mongoosejs.com/docs/schematypes.html
== https://mongoosejs.com/docs/guide.html

#### 7. 정규표현식 #### 

http://regexpal.com

== MongoDB는 ObjectID를 24바이트 16진 문자열 표현으로 반환
== https://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html
== https://docs.mongodb.com/manual/reference/method/ObjectId/ 

== 십육진법 (Hexadecimal)
== 십육진법은 십육을 밑으로 하는 기수법이다. 보통 0부터 9까지의 수와 A에서 F까지의 로마 문자를 사용하고, 이때 대소문자는 구별하지 않는다.
== Hexadecimal: 0~9까지의 숫자와 A-F까지의 알파벳이 조합된 string

== findOne
해당 조건과 일치하는 document를 찾는다.
_id로 찾는 경우에는 findById()를 사용할 것을 권장
findById(id)는 거의* findOne({ _id: id })과 동일합니다.
https://mongoosejs.com/docs/api.html#model_Model.findOne

findById
https://mongoosejs.com/docs/api.html#model_Model.findById

#### 8. Grammar ####
== video.hashtags = hashtags.split(",").map((word) => word.startsWith('#') ? word : `#${word}`);
== 해쉬태그를 컴마 기준으로 나눈 후 단어가 #으로 시작하면 word 아니면 #word로 출력
== String.prototype.startsWith()
== startsWith() 메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환
== https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

== String.prototype.endsWith()
== The endsWith() 메서드를 사용하여 어떤 문자열에서 특정 문자열로 끝나는지를 확인할 수 있으며, 그 결과를 true 혹은 false로 반환
== https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

== Model.findByIdAndUpdate() 한번에 찾고 업데이트까지
== new Model & Model.save() -> Model.create({})이랑 비슷!

== Model.exists로 video object전체가 아닌 조건 유무를 true,false로 판단해서 검색함
== Model.exists({조건문 ex) _id : id , title : title})

== findByIdAndDelete()
== document의 _id 필드로 MongoDB findOneAndDelete() 명령 실행
== findByIdAndDelete(id)는 findOneAndDelete({ _id: id })의 줄임말
== https://mongoosejs.com/docs/api.html#model_Model.findByIdAndDelete

#### 9. Use Mongo ####

1. Mongo 사용하기
> mongo // mongosh

2. 내가 가진 db 보기
> show dbs

3. 현재 사용 중인 db 확인
> db

4. 사용할 db 선택하기
> use dbName => use wetubedb

5. db 컬렉션 보기
> show collections

6. db 컬렉션 안에 documents 보기
> db.collectionName.find() => db.videos.find()

7. db 컬렉션 안에 documents 내용 모두 제거하기 
> db.collectionName.remove({}) => db.videos.remove({})
> db.videos.remove({})가 deprecated됐다고 뜬다면 db.videos.deleteMany({})로 전체 비디오 삭제


#### 10. Middleware ####

== Middleware(pre또는 post훅이라고도 불림)는 비동기 함수를 실행하는 동안 제어가 전달되는 함수
== Mongoose는 document middleware, model middleware, aggregate middleware, query middleware 4가지 미들웨어가 존재
== https://mongoosejs.com/docs/middleware.html#middleware

== model middleware가 지원하는 기능
== document middleware함수에서 this는 현재 document를 참조합니다. https://mongoosejs.com/docs/middleware.html#types-of-middleware
== https://mongoosejs.com/docs/middleware.html#pre


#### 11. Statics ####

모델에 static 함수를 추가할 수도 있습니다.
스키마에서 컴파일된 모델에 정적 "class" 메서드를 추가합니다.

Static 사용하는 두 가지 방법
```
// Assign a function to the "statics" object of our animalSchema
animalSchema.statics.findByName = function(name) {
return this.find({ name: new RegExp(name, 'i') });
};
// Or, equivalently, you can call `animalSchema.static()`.
animalSchema.static('findByBreed', function(breed) { return this.find({ breed }); });
```
https://mongoosejs.com/docs/guide.html#statics

#### 12. Requests ####

== 라우터로 지정한 :id -> req.params
== pug파일에서 input으로 받은 내용 -> req.body(form이 POST일 때)
== pug파일에서 input으로 받은 url내용 -> req.query (form이 GET일 때)


#### 13. Regular Expression - 정규표현식 ####

== https://www.regexpal.com
== (ex)  title = { $regex: new RegExp(keyword, "i") } => regular expression 안에 title에 keyword가 포함하는 것을 찾기 
== "i" => 대문자, 소문자 구분하지 않음
== `^${keyword}` => 제목이 keyword로 시작하는 것을 찾기
== `${keyword}$` => 제목이 keyword로 끝나는 것을 찾기

몽고DB regex ($regex)
몽고DB에서 정규표현식을 사용하기 위해 사용하는 키워드
쿼리의 패턴 일치 문자열에 대한 정규식 기능을 제공합니다.
https://docs.mongodb.com/manual/reference/operator/query/regex

RegExp mdn
RegExp 생성자는 패턴을 사용해 텍스트를 판별할 때 사용합니다.
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp

RegExp 사용 방법
RegExp 객체는 리터럴 표기법과 생성자로써 생성할 수 있습니다.
리터럴 표기법의 매개변수는 두 빗금으로 감싸야 하며 따옴표를 사용하지 않습니다.
생성자 함수의 매개변수는 빗금으로 감싸지 않으나 따옴표를 사용합니다.
```
/ab+c/i 를 아래 RegExp 생성자를 이용해서 만들 수 있습니다.
new RegExp(/ab+c/, 'i') // 리터럴 표기법
new RegExp('ab+c', 'i') // 생성자 함수
```


-----------------------------------------------------------------------------------------------------------------------------------------------


< User Authentication >

#### 1. Hashing ####

== npm i bcrypt

(ex)
userSchema.pre("save", async function () {
  console.log("Password: ", this.password);
  this.password = await bcrypt.hash(this.password, 5);
  console.log("Hashing Password: ", this.password);
});

==> userSchema.pre("save", async function() {} => 말그대로 pre save 저장하기 전에 잠깐 가로채서 작업할 수 있게 만듦
==> 여기서 this는 create되는 User을 가리킴

해시함수. 5분 설명 영상
https://www.youtube.com/watch?v=67UwxR3ts2E

remove() 명령어 실행이 안될 때
db.users.remove()는 deprecated되었기 때문에
db.users.deleteMany({})로 지우시면 됩니다.

해시함수 테스트
https://emn178.github.io/online-tools/sha256.html

bcrypt 설치
암호를 해시하는 데 도움이 되는 라이브러리입니다.
npm i bcrypt
https://www.npmjs.com/package/bcrypt

Schema.prototype.pre()
https://mongoosejs.com/docs/api.html#schema_Schema-pre


#### 2. Status Codes - 상태코드 ####

== 200(OK): 서버가 요청을 제대로 처리했다는 뜻이다. 이는 주로 서버가 요청한 페이지를 제공했다는 의미로 쓰인다.
== 400(Bad Request): 서버가 요청의 구문을 인식하지 못할 때 발생한다. 클라이언트 측에서 문제가 있을 때 주로 발생한다.
== 404(Not Found): 서버가 요청한 페이지를 찾을 수 없을 때 발생한다. 서버에 존재하지 않는 페이지에 대한 요청이 있을 경우 서버는 이 코드를 제공한다.
== https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C

== res.status(code) => response에 대한 HTTP 상태를 설정합니다. (status를 설정한다.)
== https://expressjs.com/ko/api.html#res.status
== https://nodejs.org/api/http.html#http_response_statuscode

#### 3. Compare Password ####

== bcrypt를 이용해서 비밀번호 비교
== password: 유저가 입력한 비밀번호 // user.passwordHash: DB에 해시화되서 저장된 비밀번호
(ex)
```
const match = await bcrypt.compare(password, user.passwordHash);
```
== https://www.npmjs.com/package/bcrypt



#### 4. Session ####
1. 브라우져 서버에 접근
2. 서버가 브라우져에게 Cookie 준다.
3. 브라우져가 서버에 다시 접근할 때 2.에서 받은 Cookie를 함께 건냄.
4. 서버는 Cookie를 통해 브라우져를 구분 할 수 있다.